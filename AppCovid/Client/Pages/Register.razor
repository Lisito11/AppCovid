@page "/register"

<h3>Register</h3>

@*AQUI VA EL FORMULARIO DE REGISTRO*@

@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager navigationManager

@using System.ComponentModel.DataAnnotations

<div style="max-width: 400px;">
    <MudCard Justify="Justify.Center">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Datos Personales">
                <MudTextField T="string" Label="Cédula" Required="true" RequiredError="@MensajeError("Cédula")" @bind-Value="@Cedula" />
                <MudTextField T="string" Label="Nombres" Required="true" RequiredError="@MensajeError("Nombres")" @bind-Value="@Nombres" />
                <MudTextField T="string" Label="Fecha de Nacimiento" Required="true" RequiredError="@MensajeError("FechaNacimiento")" @bind-Value="@FechaNacimiento" />
                <MudTextField T="string" Label="Apellidos" Required="true" RequiredError="@MensajeError("Apellidos")" @bind-Value="Apellidos" />
                <MudTextField T="string" Label="Telefono" Required="true" RequiredError="@MensajeError("Telefono")" @bind-Value="@Telefono" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="@MensajeError("Email")" @bind-Value="@Email" />
                <MudTextField T="string" Label="Tipo de sangre" Required="true" RequiredError="@MensajeError("Tipo_Sangre")" @bind-Value="Tipo_Sangre" />
                <MudTextField T="string" Label="Ha tenido Covid" Required="true" RequiredError="@MensajeError("TenerCovid")" @bind-Value="@TenerCovid" />
                <MudTextField T="string" Label="Justifique porque deben vacunarlo en su casa" Required="true" RequiredError="@MensajeError("Justificacion")" @bind-Value="Justificacion" />
            </MudExpansionPanel>
            <MudExpansionPanel Text="Dirección">
                <MudGrid Spacing="1">
                    <MudItem>
                        <MudTextField @bind-Value="CalleDireccion" Label="Calle" Variant="Variant.Text"></MudTextField>
                    </MudItem>
                    <MudItem sm="4">
                        <MudTextField @bind-Value="ProvinciaSeleccionada" Label="Provincia" Variant="Variant.Text"></MudTextField>
                    </MudItem>
                    <MudItem sm="4">
                        <MudTextField @bind-Value="SectorSeleccionada" Label="Provincia" Variant="Variant.Text"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>

        </MudExpansionPanels>
        <MudCardActions>
            <MudButton @onclick="@Registrar" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Registrar</MudButton>
        </MudCardActions>
    </MudCard>
    <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
        Fill out the form correctly to see the success message.
    </MudText>

    <MudExpansionPanels>
        <MudExpansionPanel Text="Show Validation Summary">
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

@code {
    MudForm form;
    bool showMarker = false;
    bool success;
    string MensajeError(string field) => $"{field} debe introducirse!";
    public string Cedula { get; set; }
    public string Nombres { get; set; }
    public string Apellidos { get; set; }
    public string Telefono { get; set; }
    public string Email { get; set; }
    public string Tipo_Sangre { get; set; }
    public string Justificacion { get; set; }
    public string TenerCovid { get; set; }
    public string FechaNacimiento { get; set; }
    public string ProvinciaSeleccionada { get; set; }
    public string SectorSeleccionada { get; set; }
    public string Latitud { get; set; }
    public string Longitud { get; set; }
    public string CalleDireccion { get; set; }
    private List<Persona> personas = new List<Persona>();
    private Direccion GeocodingDireccion = new Direccion();
    Persona persona = new Persona();
    Persona PersonaValidada = new Persona();

    protected override async Task OnInitializedAsync()
    {
        personas = await Http.GetFromJsonAsync<List<Persona>>("api/personas");
    }
    private async Task Registrar()
    {
        if (!String.IsNullOrEmpty(CalleDireccion) && !String.IsNullOrEmpty(ProvinciaSeleccionada))
        {
            GeocodingDireccion = await Http.GetFromJsonAsync<Direccion>($"https://maps.googleapis.com/maps/api/geocode/json?address={CalleDireccion.Replace(" ", "+")},+{ProvinciaSeleccionada.Replace(" ", "+")}&key=AIzaSyD2tTEiP_uPyq8Re9YnQyD6LkB5TGX1xnw");
            Latitud = GeocodingDireccion.Results[0].Geometry.Location.Lat.ToString();
            Longitud = GeocodingDireccion.Results[0].Geometry.Location.Lng.ToString();
            persona.Cedula = Cedula;
            persona.Nombres = Nombres;
            persona.Apellidos = Apellidos;
            persona.Provincia = ProvinciaSeleccionada;
            persona.Latitud = double.Parse(Latitud);
            persona.Longitud = double.Parse(Longitud);
            var respuestaPersona = await Http.PostAsJsonAsync("api/personas", persona);

            if (respuestaPersona.IsSuccessStatusCode)
            {
                Snackbar.Add($"{Nombres} {Apellidos} Registrado correctamente.", Severity.Success);
                navigationManager.NavigateTo("exportar");
            }
            else
            {
                Snackbar.Add($"Ha ocurrido un error.", Severity.Error);

            }

        }
    }
    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}

